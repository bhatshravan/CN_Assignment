Assignment-1 (15CS53 - Computer Networks)
Note:
. This can be done individually or in a group (either 2 or 3 students) from the same section. A group of 4 members is not allowed.
. If working in a group, please define your group members (in the google sheet).
. All the assignments are programming assignments. It is expected that you should be able to apply the concept learned in the class in writing the programs. You can choose the programming language of your choice from C/C++, Java, or Python only.
. Each needs to do 1 programming assignment. Doing more than 1 may earn you bonus marks (may be added towards other assignments).
. The team/group need to create the Github repository and provide the github repository link.
. Instructor can choose to ask the details of assignments from any member of the group. Thus all members of the groups are expected to know details of the assignment. The entire team will get marks based on the answer given by the selected member. The evaluation will be done in either Tutorial hour or your free time slot (1/2 day in a week).
. Allotment of assignment will done randomly based on group ID (as per worksheet).
. Please avoid plagiarism. Any plagiarism will be result in 0 marks. Plagiarism from internet (stack overflow, quora etc) will have equal punishment.
. The Github repository should contain the following:
    . A README file providing following details:
        . group details (USN and Name)
        . Instruction on how to execute the program with at least one example
        . Description of how the program works
        . Challenges/issues that you faced while writing such program and how did you address the same.
    . Program for the assignment.
    . a file result.txt which contains the results and explanation of the result. Provide the results of program execution with your explanation as per the parameters given in the problem. You are free to use additional parameters in case you feel these are need but same needs to be explained.
    . The values specified in the problem should not be hardcoded in the program. These should be taken as command line input parameter. Do all the necessary validation and any invalid input should be rejected. Thus, program should work correctly when the parameter values are changed.

--------------------------------------------------------------------------

A01. Computing end to end delay.
Consider a network connecting Host A to Host B via two routers R1 and R2. The transmission speeds of three links are given as t1, t2, and t3 in Mbps. Router R1 and R2 uses store and forwarding switching. Ignore the processing delay. The distance of each link is given as d1, d2 and d3 in kilometers. The speed of communication is to be taken as 2x10^8 m/s. Assume host A wants to send N packets each of size M Kilobits. Compute the end to end transmission delay. Output should display the time (in ms) for each packet when it reached R1, R2 and host B.
The program is to invoked as
    ./asn1_1 --t1 <value in Mbps> --t2 <value in Mbps> --t3 <value in Mbps> --d1 <value in KM> --d2 <value in KM> --d3 <value in KM> -N <value> -M <value in Kbits>
--------------------------------------------------------------------------

A02. Computing end to end delay with an ack.
Consider a network connecting Host A to Host B via a router R using store and forward switching. The transmission speeds of two links are given as t1 and t2 in Mbps. The distance of each link is given as d1 and d2 in kilometers. The speed of communication S*10^8 m/s. Ignore the processing delay in router. Suppose host A wants to send 2 packets each of size M megabits. A will send next packet after receiving acknowledgement from B. The size of acknowledgement packet is A Mbits. Compute the end to end transmission delay. Output should display the time (in ms) for each packet when it reached R and host B.
The program is to invoked as
    ./asn1_2 --t1 <value in Mbps> --t2 <value in Mbps>  --d1 <value in KM> --d2 <value in KM>  -M <pkt size in Mbits> -S <speed in 10^8m/s> -p <processing time in milliseconds> -A <ack pkt size in Mbits>
--------------------------------------------------------------------------

A03. Peer 2 Peer sharing
Consider that a file of size 'S' Mbits is  to be distributed from a server to 'N' peers using P2P communication architecture. The network has following characteristics. Each peer transmits data using a chunk size of 'M' Mbits. The server upload speed is 's' Mbps. Each of the peer has upload speed of 'u' Mbps and download speed of 'd' Mbps. Assume there are no processing delay and no protocol overheads. The peers download the chunks using Rarest-First mechanism. Compute the minimum distribution time by showing actual chunks distributed at each state of distribution. For simplicity of computation, you can assume that 'd' in as integer multiple of 'u' and 'S' is an integer multiple of 'M'.

The program is to be invoked as
    ./asn1_3 -S <file size in Mbits> -N <num of peers> -M <chunk size in Mbits> -s <server upload speed in Mbps> -u <peer upload speed in Mbps> -d <peer download speen in Mbps>
The display matrix may look as

Time                New peers       new Chunks      total chunks
                                    transmitted     transmitted
1                   ...             ...             ...
2                   ...             ...             ...
:
:
:
--------------------------------------------------------------------------

A04. Implement SMTP protocol.
Write a SMTP client to send more than one email in the same session. The mail content is to be taken from files and subject of the mail should be name of the file. The program is to be invoked as
    ./asn1.py -f <from email address> -d <recipient-1 email address>,<recipient 2 email address>..., -i <file1>,<file2>... -s <server IP address>

Example invocation (create two files hello.txt and goodbye.txt with some contents>
    ./asn1_4 -f rprustagi@ksit.local -d 1ks15cs001@ksit.local,1ks15cs002@ksit.local  -i hello.txt,goodbye.txt -s 10.30.26.21
--------------------------------------------------------------------------

A05. Implement POP3 protocol
Write a POP3 client to retrieve emails from POP3 server and display these on the screen, and delete only first and last email. The server name, username and password is to be taken from command line. The program is to be invoked as

    ./asn1_5 -u <username> -p <password> -s <POP3 server>
E.g. 10.30.26.21 as your POP3 server (in the lab) and use your usn account as user name and your password for the same.
--------------------------------------------------------------------------

A06. Implement web access including redirect.
Write a web client to access a webpage on a web server (e.g. cse.ksit.edu.in). If the server redirects the request to another URL using status code 301 or 302, then client should access the new URL. Repeat the process till status code received is 200 or 403 or 404. Save the content of the received file in your local directory as per path given in the redirected URL and also note down the Last-Modified header for this file. Next time this URL is invoked, client should send the headers If-Modified-Since and it should process the response accordingly. The program is to be invoked as
    ./asn1_6 -u <URL>
--------------------------------------------------------------------------

A07. Implement web access with embedded URLs.
Write a web client to access a webpage on a web server (e.g. cse.ksit.edu.in). The web page will contain few images as embedded objects using <img src="url">. Using the specified parallel connections, retrieve these images and save these. Save the content of the received file in your local directory as per path given in the redirected URL and also note down the Last-Modified header for this file. Next time this URL is invoked, client should send the headers If-Modified-Since and it should process the response accordingly. The program is to be invoked as

    ./asn1_7 -u <URL> -p <number of parallel connections>
Try opening the saved .html file locally on the disk in the local browser and it should display the page correctly.
--------------------------------------------------------------------------

A08. Modify UDP message to show the same checksum.
Write a UDP Client program that sends some data to a UDP server on a specified port. The server echoes back the content received by duplicating it (e.g. if clients sends data as 'ABCD', the server will respond back with 'ABCDABCD'). For this  request sent and received response compute the checksum and display the same.  Verify your checksum computation by taking a tcpdump and displaying the same. Make a second request by appending 6 characters to original data to ensure that checksum remains the same. The first two characters of these 6 added characters should be first 4 characters of original input and remaining 4 characters you need to compute.

The program is to be invoked as
    ./asn1_8 -s <server ip address> -p <server port number> -P <client port number> -d <data>
--------------------------------------------------------------------------

A09. Implement DHT
Consider implementing a DHT with shortcuts having N peers. Each peer is provided with information about the peer knows. The implementation of keys is done using immediate successor. Each peer will run as a separate program. Each peer will ask for an input of key value for which it needs to obtain a response. The response should given as square of the key value. The program invocation for each peer will be as
    ./asn1_9 -i <my peer id> -n <list of short cut peers> -m <number of bits in peer id> -s <starting key value>

Example: Assume that peer id ranges from 0 to 15 and that we invoke peers as below (each in a separate window) as follows
    ./asn1_9 -i 1 -n 3,10 -m 4 -s 13
    ./asn1_9 -i 3 -n 4,8,12 -m 4 -s 2
    ./asn1_9 -i 4 -n 8,12 -m 4
    ./asn1_9 -i 8 -n 12 -m 4 -s 5
    ./asn1_9 -i 10 -n 12,1 -m 4 -s 9
    ./asn1_9 -i 12 -n 1,3 -m 4 -s 11

Assume for peer 3, we input the key as 14. Show the communication among peers to obtain the response. All message exchange should happen on UDP and each peers listens on port number 500II, where II corresponds to peer id. For exmaple for peer id 3, the listen port number will be 50003, for peer id 12, the port number is 50012.
--------------------------------------------------------------------------


